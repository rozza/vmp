/*
 * Copyright (c) 2008 - 2013 10gen, Inc. <http://10gen.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package org.mongo.visualmongopro.graphql;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.MongoIterable;
import graphql.schema.DataFetcher;
import org.bson.BsonType;
import org.bson.Document;
import org.bson.codecs.BsonTypeClassMap;
import org.bson.codecs.DocumentCodecProvider;
import org.bson.codecs.configuration.CodecRegistries;
import org.bson.conversions.Bson;
import org.jetbrains.annotations.NotNull;
import org.mongo.visualmongopro.graphql.codecs.OffsetDateTimeCodec;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static com.mongodb.client.model.Filters.*;
import static java.util.Arrays.asList;

@Component
public class CollectionDataFetcher {
  private final MongoCollection<Document> collectionMetadata;

  public CollectionDataFetcher(@Autowired MongoClient client) {
    MongoDatabase visualMongoDBProDatabase = client.getDatabase("visualmongodbpro");
    this.collectionMetadata =
        visualMongoDBProDatabase
            .getCollection("collection.metadata")
            .withCodecRegistry(
                CodecRegistries.fromRegistries(
                    CodecRegistries.fromCodecs(new OffsetDateTimeCodec()),
                    CodecRegistries.fromProviders(
                        new DocumentCodecProvider(
                            new BsonTypeClassMap(
                                Map.of(BsonType.DATE_TIME, OffsetDateTime.class)))),
                    visualMongoDBProDatabase.getCodecRegistry()));
  }

  @PostConstruct
  public void init() {
    collectionMetadata.drop();
    collectionMetadata.insertMany(
        asList(
            new Document(Map.of(
                "databaseName", "test",
                "collectionName", "test1",
                "jsonSchema", Document.parse("{" +
                                             "  \"title\": \"A registration form\"," +
                                             "  \"description\": \"A simple form example.\"," +
                                             "  \"type\": \"object\"," +
                                             "  \"required\": [" +
                                             "    \"firstName\"," +
                                             "    \"lastName\"" +
                                             "  ]," +
                                             "  \"properties\": {" +
                                             "    \"firstName\": {" +
                                             "      \"type\": \"string\"," +
                                             "      \"title\": \"First name\"," +
                                             "      \"default\": \"Chuck\"" +
                                             "    }," +
                                             "    \"lastName\": {" +
                                             "      \"type\": \"string\"," +
                                             "      \"title\": \"Last name\"" +
                                             "    }," +
                                             "    \"telephone\": {" +
                                             "      \"type\": \"string\"," +
                                             "      \"title\": \"Telephone\"," +
                                             "      \"minLength\": 10" +
                                             "    }" +
                                             "  }" +
                                             "}"),
                "isSchemaAutoGenerated", false,
                "uiSchema", Document.parse("{" +
                                           "  \"firstName\": {" +
                                           "    \"ui:autofocus\": true," +
                                           "    \"ui:emptyValue\": \"\"," +
                                           "    \"ui:autocomplete\": \"family-name\"" +
                                           "  }," +
                                           "  \"lastName\": {" +
                                           "    \"ui:emptyValue\": \"\"," +
                                           "    \"ui:autocomplete\": \"given-name\"" +
                                           "  }," +
                                           "  \"age\": {" +
                                           "    \"ui:widget\": \"updown\"," +
                                           "    \"ui:title\": \"Age of person\"," +
                                           "    \"ui:description\": \"(earthian year)\"" +
                                           "  }," +
                                           "  \"bio\": {" +
                                           "    \"ui:widget\": \"textarea\"" +
                                           "  }," +
                                           "  \"password\": {" +
                                           "    \"ui:widget\": \"password\"," +
                                           "    \"ui:help\": \"Hint: Make it strong!\"" +
                                           "  }," +
                                           "  \"date\": {" +
                                           "    \"ui:widget\": \"alt-datetime\"" +
                                           "  }," +
                                           "  \"telephone\": {" +
                                           "    \"ui:options\": {" +
                                           "      \"inputType\": \"tel\"" +
                                           "    }" +
                                           "  }" +
                                           "}")
            ))
        ));
  }

  public DataFetcher<List<Map<String, Object>>> getCollectionsDataFetcher() {
    return dataFetchingEnvironment ->
        find(empty()).into(new ArrayList<>());
  }

  public DataFetcher<List<Map<String, Object>>> getCollectionsByDatabaseDataFetcher() {
    return dataFetchingEnvironment ->
        find(eq("databaseName", dataFetchingEnvironment.<String>getArgument("databaseName")))
            .into(new ArrayList<>());
  }

  public DataFetcher<Map<String, Object>> getCollectionsByNamespaceDataFetcher() {
    return dataFetchingEnvironment ->
        find(and(
            eq("databaseName", dataFetchingEnvironment.<String>getArgument("databaseName")),
            eq("collectionName", dataFetchingEnvironment.<String>getArgument("collectionName"))))
            .first();
  }

  @NotNull
  private MongoIterable<Document> find(Bson filter) {
    return collectionMetadata.find(filter)
        .map(document -> {
          if (document.containsKey("jsonSchema")) {
            document.put("jsonSchema", document.get("jsonSchema", Document.class).toJson());
          }
          if (document.containsKey("uiSchema")) {
            document.put("uiSchema", document.get("uiSchema", Document.class).toJson());
          }
          return document;
        });
  }
}
