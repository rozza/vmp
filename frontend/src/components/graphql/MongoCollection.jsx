import React from 'react';
import { GraphQL, GraphQLProvider, useGraphQL } from 'graphql-react';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableContainer from '@material-ui/core/TableContainer';
import TableHead from '@material-ui/core/TableHead';
import TablePagination from '@material-ui/core/TablePagination';
import TableRow from '@material-ui/core/TableRow';
import Paper from '@material-ui/core/Paper';
import Loader from '../Loader';
import { withStyles } from '@material-ui/core/styles';
import { reactOptions } from './reactOptions';
import {
  BrowserRouter as Router,
  Switch,
  Route,
  Link,
  useParams,
  useRouteMatch
} from "react-router-dom";

import { styles } from '../styles';

const CollectionGraphQL = ({databaseName, collectionName}) => {

  const query = `
    {
      collectionByNamespace(databaseName: "${databaseName}", collectionName: "${collectionName}") {
        jsonSchema
        isSchemaAutoGenerated
        uiSchema
      }
    }
  `;


  // Memoization allows the `useGraphQL` hook to avoid work in following renders
  // with the same GraphQL operation.
  const operation = React.useMemo(
    () => ({
      query,
      variables: {
      },
    }),
    [databaseName, collectionName]
  );

    // The `useGraphQL` hook can be used for both queries and mutations.
  const { loading, cacheValue: { data, ...errors } = {} } = useGraphQL({
    operation,
    fetchOptionsOverride: reactOptions,
    loadOnMount: true,
    loadOnReload: true,
    loadOnReset: true
  });

  const classes = withStyles(styles);

  console.log("DATA: ", data)
  return (
    <Paper className={classes.root}>
    <div>OKO</div>
    {data && (
      <>
      <p>COOL</p>
      </>
      )}
    {loading && <Loader />}
    </Paper>
  );
}

export default function MongoCollection() {
  const graphql = new GraphQL();
  let { databaseName, collectionName } = useParams();
  return (
    <CollectionGraphQL databaseName={databaseName} collectionName={collectionName} />
  );
};
